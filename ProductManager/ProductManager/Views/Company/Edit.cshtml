@using ProductManager.ViewModels;
@model CompanyDetailsViewModel
@{
}

<h1>Edit a Company</h1>

<form asp-controller="Company" asp-action="Edit" method="post">
    @Html.AntiForgeryToken()
    <div asp-validation-summary="ModelOnly" class="text-danger"></div>

    <div class="form-group">
        <label asp-for="CompanyName">Company Name</label>
        <input asp-for="CompanyName" class="form-control" />
        <span asp-validation-for="CompanyName" class="text-danger"></span>
    </div>

    <div class="form-group">
        <label asp-for="CompanyPhoneNumber">Phone</label>
        <input asp-for="CompanyPhoneNumber" class="form-control" />
        <span asp-validation-for="CompanyPhoneNumber" class="text-danger"></span>
    </div>

    <div class="form-group">
        <label asp-for="CompanyEmail">Email</label>
        <input asp-for="CompanyEmail" class="form-control" />
        <span asp-validation-for="CompanyEmail" class="text-danger"></span>
    </div>

    <div class="form-group">
        <label asp-for="AdminEmail">Admin Email</label>
        <input asp-for="AdminEmail" class="form-control" />
        <span asp-validation-for="AdminEmail" class="text-danger"></span>
    </div>

    <div class="form-group">
        <label asp-for="SelectedLicenceId">Licence</label>
        <select asp-for="SelectedLicenceId" id="SelectedLicence" class="form-control">
            @if (Model != null && Model.Licences != null)
            {
                foreach (var licence in Model.Licences)
                {
                    <option value="@licence.Value" data-cost="@licence.Cost">@licence.Text</option>
                }
            }
        </select>
        <span asp-validation-for="SelectedLicenceId" class="text-danger"></span>
    </div>

    <div class="form-group">
        <label asp-for="Quantity">Quantity</label>
        <div class="input-group">
            <span class="input-group-btn">
                <button class="btn btn-default" type="button" id="decrementQuantity">-</button>
            </span>
            <input asp-for="Quantity" class="form-control text-center" type="number" id="Quantity" min="1" step="1" />
            <span class="input-group-btn">
                <button class="btn btn-default" type="button" id="incrementQuantity">+</button>
            </span>
        </div>
        <span asp-validation-for="Quantity" class="text-danger"></span>
    </div>

    <div class="form-group">
        <label asp-for="PurchaseDate">Date</label>
        <input asp-for="PurchaseDate" class="form-control" readonly />
        <span asp-validation-for="PurchaseDate" class="text-danger"></span>
    </div>

    <div class="form-group">
        <label asp-for="TotalCost">Total Cost</label>
        <input asp-for="TotalCost" class="form-control" id="TotalCost" readonly />
        <span asp-validation-for="TotalCost" class="text-danger"></span>
    </div>

    <button type="submit">Purchase Licence</button>
</form>

<script>
    document.addEventListener("DOMContentLoaded", function () {
        updateTotalCost();
        var totalCostInput = document.getElementById("TotalCost");
    });

    var quantityInput = document.getElementById("Quantity");
    var totalCostInput = document.getElementById("TotalCost");
    var decrementButton = document.getElementById("decrementQuantity");
    var incrementButton = document.getElementById("incrementQuantity");
    var selectedLicence = document.getElementById("SelectedLicence")

    decrementButton.addEventListener("click", function () {
        // Decrement the quantity when the "-" button is clicked
        if (quantityInput.value > 1) {
            quantityInput.value = parseInt(quantityInput.value) - 1;
            updateTotalCost();
        }
    });

    incrementButton.addEventListener("click", function () {
        // Increment the quantity when the "+" button is clicked
        quantityInput.value = parseInt(quantityInput.value) + 1;
        updateTotalCost();
    });

    selectedLicence.addEventListener("click", function () {
        updateTotalCost();
    })

    function updateTotalCost() {
        var quantity = parseInt(quantityInput.value);
        var selectedIndex = selectedLicence.selectedIndex;

        if (selectedIndex !== -1){
            var cost = parseFloat(selectedLicence.options[selectedIndex].getAttribute("data-cost"));

            if (!isNaN(quantity) && !isNaN(cost)) {
                var totalCost = quantity * cost;
                totalCost = totalCost.toFixed(2);
                var formattedValue = totalCost.toString().replace('.', ',');
                totalCostInput.value = formattedValue;
            } else {
                totalCostInput.value = "";
            }
        }
        if (!isNaN(quantity)) {
            var totalCost = parseFloat(quantity) * parseFloat(cost);
            totalCost = totalCost.toFixed(2);
            var formattedValue = totalCost.toString().replace('.', ',');
            totalCostInput.value = formattedValue;
        } else {
            totalCostInput.value = "";
        }
    }
</script>